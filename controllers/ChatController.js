// Chat Controller - AI Chat Integration
const AIService = require('../services/AIService');
const { catchAsync, AppError } = require('../utils/helpers');
const { logApiResponse } = require('../utils/logger');

class ChatController {
  /**
   * Handle chat messages
   */
  static sendMessage = catchAsync(async (req, res) => {
    console.log('ü§ñ Chat request received:', req.body);
    const { messages, options = {} } = req.body;

    // Validate input
    if (!messages || !Array.isArray(messages) || messages.length === 0) {
      return res.status(400).json({
        success: false,
        message: 'Messages array is required and cannot be empty',
        code: 'INVALID_MESSAGES'
      });
    }

    // Validate message format
    const isValidMessages = messages.every(msg => 
      msg && 
      typeof msg === 'object' && 
      msg.role && 
      msg.content &&
      ['user', 'assistant', 'system'].includes(msg.role)
    );

    if (!isValidMessages) {
      return res.status(400).json({
        success: false,
        message: 'Invalid message format. Each message must have role and content',
        code: 'INVALID_MESSAGE_FORMAT'
      });
    }

    // Limit conversation history
    const maxMessages = 20;
    const limitedMessages = messages.slice(-maxMessages);

    try {
      // Generate AI response
      const aiResponse = await AIService.generateChatResponse(limitedMessages, options);

      const response = {
        success: true,
        message: aiResponse.message,
        provider: aiResponse.provider,
        model: aiResponse.model,
        timestamp: new Date().toISOString()
      };

      logApiResponse(req, res, response);
      res.json(response);

    } catch (error) {
      const fallbackResponse = AIService.getFallbackResponse();
      
      const response = {
        success: true, // Still return success to avoid breaking frontend
        message: fallbackResponse.message,
        provider: fallbackResponse.provider,
        model: fallbackResponse.model,
        error: 'AI service temporarily unavailable',
        timestamp: new Date().toISOString()
      };

      logApiResponse(req, res, response);
      res.json(response);
    }
  });

  /**
   * Generate food description using AI
   */
  static generateFoodDescription = catchAsync(async (req, res) => {
    const { foodName, ingredients, category } = req.body;

    if (!foodName || typeof foodName !== 'string' || foodName.trim().length === 0) {
      return res.status(400).json({
        success: false,
        message: 'Food name is required',
        code: 'INVALID_FOOD_NAME'
      });
    }

    try {
      const description = await AIService.generateFoodDescription(
        foodName.trim(),
        ingredients || '',
        category || ''
      );

      const response = {
        success: true,
        data: {
          foodName: foodName.trim(),
          description: description || 'Kh√¥ng th·ªÉ t·∫°o m√¥ t·∫£ cho m√≥n ƒÉn n√†y.',
          generated: !!description
        },
        timestamp: new Date().toISOString()
      };

      logApiResponse(req, res, response);
      res.json(response);

    } catch (error) {
      const response = {
        success: false,
        message: 'Kh√¥ng th·ªÉ t·∫°o m√¥ t·∫£ m√≥n ƒÉn',
        error: error.message,
        timestamp: new Date().toISOString()
      };

      logApiResponse(req, res, response);
      res.status(500).json(response);
    }
  });

  /**
   * Get AI service status
   */
  static getServiceStatus = catchAsync(async (req, res) => {
    const status = AIService.getServiceStatus();

    const response = {
      success: true,
      data: {
        services: status,
        available: status.gemini.available || status.groq.available,
        primary: status.gemini.available ? 'gemini' : (status.groq.available ? 'groq' : 'none')
      },
      timestamp: new Date().toISOString()
    };

    logApiResponse(req, res, response);
    res.json(response);
  });

  /**
   * Get restaurant information for chatbot
   */
  static getRestaurantInfo = catchAsync(async (req, res) => {
    const restaurantInfo = {
      name: '·∫®m Th·ª±c Ph∆∞∆°ng Nam',
      description: 'Nh√† h√†ng chuy√™n v·ªÅ c√°c m√≥n ƒÉn truy·ªÅn th·ªëng mi·ªÅn Nam Vi·ªát Nam',
      specialties: [
        'Ph·ªü B√≤',
        'B√∫n B√≤ Hu·∫ø', 
        'B√°nh X√®o',
        'G·ªèi Cu·ªën',
        'C∆°m T·∫•m',
        'B√°nh Kh·ªçt'
      ],
      contact: {
        phone: '0123-456-789',
        email: 'info@amthucphuongnam.com',
        address: '123 ƒê∆∞·ªùng ABC, Qu·∫≠n XYZ, TP.HCM'
      },
      hours: {
        monday: '10:00 - 22:00',
        tuesday: '10:00 - 22:00',
        wednesday: '10:00 - 22:00',
        thursday: '10:00 - 22:00',
        friday: '10:00 - 22:00',
        saturday: '09:00 - 23:00',
        sunday: '09:00 - 23:00'
      },
      features: [
        'Kh√¥ng gian ·∫•m c√∫ng',
        'H∆∞∆°ng v·ªã ƒë·∫≠m ƒë√† truy·ªÅn th·ªëng',
        'Nguy√™n li·ªáu t∆∞∆°i ngon',
        'Ph·ª•c v·ª• t·∫≠n t√¨nh',
        'Gi√° c·∫£ h·ª£p l√Ω'
      ]
    };

    const response = {
      success: true,
      data: restaurantInfo,
      timestamp: new Date().toISOString()
    };

    logApiResponse(req, res, response);
    res.json(response);
  });

  /**
   * Get suggested questions for chatbot
   */
  static getSuggestedQuestions = catchAsync(async (req, res) => {
    const suggestedQuestions = [
      'Nh√† h√†ng c√≥ nh·ªØng m√≥n ƒÉn g√¨ ƒë·∫∑c bi·ªát?',
      'Gi·ªù m·ªü c·ª≠a c·ªßa nh√† h√†ng nh∆∞ th·∫ø n√†o?',
      'T√¥i mu·ªën ƒë·∫∑t b√†n cho 4 ng∆∞·ªùi',
      'M√≥n n√†o ph√π h·ª£p cho ng∆∞·ªùi ƒÉn chay?',
      'Gi√° c·∫£ c√°c m√≥n ƒÉn nh∆∞ th·∫ø n√†o?',
      'Nh√† h√†ng c√≥ giao h√†ng t·∫≠n n∆°i kh√¥ng?',
      'C√≥ combo n√†o cho gia ƒë√¨nh kh√¥ng?',
      'M√≥n n√†o cay nh·∫•t trong menu?',
      'Nh√† h√†ng c√≥ ch·ªó ƒë·∫≠u xe kh√¥ng?',
      'C√≥ th·ªÉ thanh to√°n b·∫±ng th·∫ª kh√¥ng?'
    ];

    const response = {
      success: true,
      data: {
        questions: suggestedQuestions,
        total: suggestedQuestions.length
      },
      timestamp: new Date().toISOString()
    };

    logApiResponse(req, res, response);
    res.json(response);
  });

  /**
   * Health check for chat service
   */
  static healthCheck = catchAsync(async (req, res) => {
    console.log('üè• Health check request received');
    const status = AIService.getServiceStatus();
    const isHealthy = status.gemini.available || status.groq.available;

    const response = {
      success: true,
      status: isHealthy ? 'healthy' : 'degraded',
      message: isHealthy ? 'Chat service is operational' : 'Chat service is running with limited functionality',
      services: status,
      timestamp: new Date().toISOString()
    };

    const statusCode = isHealthy ? 200 : 503;
    
    logApiResponse(req, res, response);
    res.status(statusCode).json(response);
  });
}

module.exports = ChatController;
